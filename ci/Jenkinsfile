def get_environment() {
    //if (env.BRANCH_NAME.startsWith("master")) { return "Staging" }
    return "staging"
}

def get_pollSCM_trigger() {
    if (env.BRANCH_NAME.equals("master")) { return "* * * * *" }
    return ""
}

pipeline {
    agent any
    environment {
        NOTIFY_SLACK_SUBJECT = "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}>"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM(get_pollSCM_trigger())
    }
    stages {
        stage("Setup") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                script {

                    STAGE_FRONTEND_BUILD_CMD = [
                        "mkdir tmp",
                        "npm install",
                        "export TMPDIR=/home/jenkins/tmp",
                        "yarn install",
                        "grunt deploy --target=${get_environment()?.trim()}"
                    ].join(" && ")

                    STAGE_FRONTEND_TEST_CMD = [
                        "grunt test"
                    ].join(" && ")

                    STAGE_BACKEND_BUILD_CMD = [
                        "./sbt -Ddigiroad2.env=${get_environment()?.trim()} assembly"
                    ].join(" && ")

                }
            }
        }
        stage("Prepare") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                script {
                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()
                    echo "Running publish... (skipped for now) ${no_proxy}"
                    def build_args = [
                        //"--build-arg http_proxy=${http_proxy}",
                        //"--build-arg https_proxy=${http_proxy}",
                        //"--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")
                    docker.build(
                        "viite-frontend-node",
                        "${build_args} -f ci/Dockerfile.node ci"
                    )
                    docker.build(
                        "viite-backend-sbt",
                        "${build_args} -f ci/Dockerfile.sbt ci"
                    )
                }
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
        stage("Build: Frontend") {
            agent {
                docker {
                    image "viite-frontend-node"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                //sh STAGE_FRONTEND_BUILD_CMD
                echo "Running frontend build... (skipped for now)"
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
		stage("Build: Backend") {
            agent {
                docker {
                    image "viite-backend-sbt"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_BACKEND_BUILD_CMD
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
        stage("Publish") {
            agent any
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                //sh STAGE_PUBLISH_CMD
				echo "Running publish... (skipped for now)"
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
       stage("Deploy") {
            agent any
            when {
                beforeAgent true
                expression {
                    get_environment().equals("Staging")
                }
            }
            steps {
				//sh STAGE_DEPLOY_CMD
				echo "Running deploy... (skipped for now)"
            }
            //post {
            //    failure {
                    //slackSend(
                    //    color: "danger",
                    //    message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    //)
            //    }
            //}
        }
    }
    post {
        always {
            //slackSend(
            //    color: currentBuild.currentResult.equals("SUCCESS") ? "good" : "danger",
            //    message: "${NOTIFY_SLACK_SUBJECT}\nJob ${currentBuild.currentResult}! More info <${BUILD_URL}|here>."
            //)
            deleteDir()
        }
    }
}