import groovy.json.JsonOutput

def get_environment() {
    if (BRANCH_NAME.equals("ci")) { return "it" } // TODO REMOVE
    if (BRANCH_NAME.equals("develop")) { return "it" }
    if (BRANCH_NAME.startsWith("release")) { return "qa" }
    if (BRANCH_NAME.equals("master")) { return "prod" }
    return ""
}
def get_host_list() {
    def hosts = []
    if (["it"].contains(get_environment())) {
        hosts.add("livikeh01l.vally.local")
    } else if (["qa"].contains(get_environment())) {
        hosts.add("livikeh02l.vally.local")
        hosts.add("livikeh03l.vally.local")
    } else if (["prod"].contains(get_environment())) {
        hosts.add("livituo18")
        hosts.add("livituo19")
    }
    return hosts
}
def get_pollSCM_trigger() {
    if (BRANCH_NAME.equals("develop")) { return "H/5 * * * *" } 
    return ""
}
def get_service_environment() {
    return get_environment().equals("prod") ? "prod" : "test"
}
def get_version_suffix() {
    if (BRANCH_NAME.equals("develop")) { return "-SNAPSHOT" }
    if (BRANCH_NAME.equals("master")) { return "" }
    return "-${get_environment().toUpperCase()}-SNAPSHOT"
}
pipeline {
    agent any
    environment {
        DB_CRED_OWNER = credentials("db-cred-owner-${get_service_environment()}")
        DB_CRED_FLYWAY = credentials("db-cred-flyway-${get_service_environment()}")
        DB_HOST = credentials("db-host-${get_service_environment()}")
        DB_NAME = credentials("db-name-${get_environment()}")
        NOTIFY_MAIL_TO = "sami.kosonen@cgi.com"
        NOTIFY_MAIL_MIMETYPE = "text/html"
        NOTIFY_MAIL_SUBJECT = "${JOB_NAME} - ${BUILD_ID}"
        NOTIFY_SLACK_SUBJECT = "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}>"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM(get_pollSCM_trigger())
    }
    stages {
        stage("Setup") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                script {

                    // TODO

                    def pom = readMavenPom()

                    def deploy_target = get_environment()

                    def artifact_id = pom.artifactId
                    def artifact_version = "${pom.version}${get_version_suffix()}"
                    def group_id = pom.groupId
                    def extension = pom.packaging
                    def filename = "target/${artifact_id}.${extension}"
                    def repository_url = "http://livibuild04.vally.local/nexus/repository/raide"

                    STAGE_ACK_PARAMETERS = [
                        choice(choices: deploy_target, description: "Deploy target.", name: "deploy_target"),
                        choice(choices: artifact_id, description: "Artifact ID", name: "artifact_id"),
                        choice(choices: artifact_version, description: "Artifact version", name: "artifact_version"),
                        choice(choices: group_id, description: "Group ID", name: "group_id")
                    ]

                    def config = "src/main/resources/config/rahti-backend-ci.yml"
                    STAGE_BUILD_CMD = [
                        "sed -i 's/DB_CRED_OWNER_USR/${DB_CRED_OWNER_USR}/g' ${config}",
                        "sed -i 's/DB_CRED_OWNER_PSW/${DB_CRED_OWNER_PSW}/g' ${config}",
                        "sed -i 's/DB_CRED_FLYWAY_USR/${DB_CRED_FLYWAY_USR}/g' ${config}",
                        "sed -i 's/DB_CRED_FLYWAY_PSW/${DB_CRED_FLYWAY_PSW}/g' ${config}",
                        "sed -i 's/DB_HOST/${DB_HOST}/g' ${config}",
                        "sed -i 's/DB_NAME/${DB_NAME}/g' ${config}",
                        [
                            "mvn",
                            "versions:set",
                            "-DnewVersion=${artifact_version}",
                            "--batch-mode"
                        ].join(" "),
                        [
                            "mvn",
                            "clean",
                            "install",
                            "--batch-mode"
                        ].join(" ")
                    ].join(" && ")

                    STAGE_BUILD_JUNIT_RESULTS = "target/*-reports/*.xml"

                    STAGE_CONFIRM_TEXT = "Create release ${group_id}:${artifact_id}@${artifact_version} and deploy to ${deploy_target}?"

                    STAGE_PUBLISH_CMD = [
                        "mvn",
                        "deploy:deploy-file",
                        "-Dfile=${filename}",
                        "-DpomFile=pom.xml",
                        "-DrepositoryId=nexus3",
                        "-Durl=${repository_url}",
                        "--batch-mode"
                    ].join(" ")

                    STAGE_DEPLOY_EXTRAVARS = [
                        raide_target: get_environment(),
                        raide_deploy: JsonOutput.toJson([
                            artifact_id: artifact_id,
                            group_id: group_id,
                            extension: extension,
                            version: artifact_version,
                            repository_url: repository_url
                        ])
                    ]

                    STAGE_TEST_PATH = "src"

                    STAGE_TEST_CMD = [
                        "cd ${STAGE_TEST_PATH}",
                        get_host_list().collect {
                            [
                                "robot",
                                "--include smoke",
                                "--log NONE",
                                "--name ${it}",
                                "--nostatusrc",
                                "--output ${it}.xml",
                                "--report NONE",
                                "--variable API_URI:http://${it}/raide/materiaalihallinta/rest",
                                "test"
                            ].join(" ")
                        }.join(" && "),
                        [
                            "rebot",
                            "--name ${get_host_group()}",
                            "--nostatusrc",
                            "--output output.xml",
                            "${get_host_group()}*.xml"
                        ].join(" ")
                    ].join(" && ")

                    STAGE_TEST_STEP = [
                        $class: "RobotPublisher",
                        disableArchiveOutput: false,
                        logFileName: "log.html",
                        otherFiles: "",
                        outputFileName: "output.xml",
                        outputPath: "${STAGE_TEST_PATH}",
                        passThreshold: 100,
                        reportFileName: "report.html",
                        unstableThreshold: 0
                    ]
                }
            }
        }
        stage("Ack") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                expression {
                    get_environment()?.trim() && !get_pollSCM_trigger().trim()
                }
            }
            steps {
                mail(
                    to: NOTIFY_MAIL_TO,
                    mimeType: "text/html",
                    subject: NOTIFY_MAIL_SUBJECT,
                    body: "Stage <b>${STAGE_NAME}</b> requires acknowledgement! Visit <a href='${RUN_DISPLAY_URL}'>here</a> and verify!"
                )
                slackSend(
                    color: "warning",
                    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires acknowledgement! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input(
                    message: "Proceed with following settings?",
                    parameters: STAGE_ACK_PARAMETERS
                )
            }
            post {
                aborted {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> aborted because acknowledgement timeout exceeded or user action!"
                    )
                    slackSend(
                        color: "warning",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because acknowledgement timeout exceeded or user action!"
                    )
                }
                failure {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Prepare") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {


                // TODO

                sh "cp /data1/ci/{maven,python}/* ci/confs/"
                script {
                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()
                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")
                    docker.build(
                        "raide-rahti-backend-maven",
                        "${build_args} -f ci/Dockerfile.maven ci"
                    )
                    docker.build(
                        "raide-rahti-backend-python",
                        "${build_args} -f ci/Dockerfile.python ci"
                    )
                }
            }
            post {
                failure {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Build") {
            agent {
                docker {
                    image "viite"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_BUILD_CMD
            }
            post {
                always {
                    junit(
                        allowEmptyResults: true,
                        testResults: STAGE_BUILD_JUNIT_RESULTS
                    )
                }
                failure {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Confirm") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                beforeAgent true
                branch "master"
            }
            steps {
                mail(
                    to: NOTIFY_MAIL_TO,
                    mimeType: "text/html",
                    subject: NOTIFY_MAIL_SUBJECT,
                    body: "Stage <b>${STAGE_NAME}</b> requires confirmation! Visit <a href='${RUN_DISPLAY_URL}'>here</a> and verify!"
                )
                slackSend(
                    color: "warning",
                    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires confirmation! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input STAGE_CONFIRM_TEXT
            }
            post {
                aborted {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> aborted because confirmation timeout exceeded or user action!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because acknowledgement timeout exceeded or user action!"
                    )
                }
                failure {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Publish") {
            agent {
                docker {
                    image "viite"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_PUBLISH_CMD
            }
            post {
                failure {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Deploy") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                ansiblePlaybook(
                    playbook: "/data1/ansible/raide.yml",
                    inventory: "/data1/ansible/inventories/raide",
                    vaultCredentialsId: "ansible-vault",
                    tags: "service-deploy-artifact",
                    extraVars: STAGE_DEPLOY_EXTRAVARS
                )
            }
            post {
                failure {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Test") {
            agent {
                docker {
                    image "viite-python"
                    args "--network host"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_TEST_CMD
                step(STAGE_TEST_STEP)
            }
            post {
                always {
                    archiveArtifacts(
                        allowEmptyArchive: true,
                        artifacts: "${STAGE_TEST_PATH}/*.html"
                    )
                }
                failure {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
                unstable {
                    mail(
                        to: NOTIFY_MAIL_TO,
                        mimeType: "text/html",
                        subject: NOTIFY_MAIL_SUBJECT,
                        body: "Stage <b>${STAGE_NAME}</b> failure! Check <a href='${BUILD_URL}console'>console</a>!"
                    )
                    slackSend(
                        color: "warning",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
    }
    post {
        always {
            mail(
                to: NOTIFY_MAIL_TO,
                mimeType: "text/html",
                subject: NOTIFY_MAIL_SUBJECT,
                body: "Job <b>${currentBuild.currentResult}</b>! More info <a href='${BUILD_URL}'>here</a>."
            )
            slackSend(
                color: currentBuild.currentResult.equals("SUCCESS") ? "good" : "danger",
                message: "${NOTIFY_SLACK_SUBJECT}\nJob ${currentBuild.currentResult}! More info <${BUILD_URL}|here>."
            )
            deleteDir()
        }
    }
}
